{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"StompJs\", [], factory);else if (typeof exports === 'object') exports[\"StompJs\"] = factory();else root[\"StompJs\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return /******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/\n    var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/\n    function __webpack_require__(moduleId) {\n      /******/\n      /******/ // Check if module is in cache\n      /******/if (installedModules[moduleId]) {\n        /******/return installedModules[moduleId].exports;\n        /******/\n      }\n      /******/ // Create a new module (and put it into the cache)\n      /******/\n      var module = installedModules[moduleId] = {\n        /******/i: moduleId,\n        /******/l: false,\n        /******/exports: {}\n        /******/\n      };\n      /******/\n      /******/ // Execute the module function\n      /******/\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      /******/\n      /******/ // Flag the module as loaded\n      /******/\n      module.l = true;\n      /******/\n      /******/ // Return the exports of the module\n      /******/\n      return module.exports;\n      /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/\n    __webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/\n    __webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/\n    __webpack_require__.d = function (exports, name, getter) {\n      /******/if (!__webpack_require__.o(exports, name)) {\n        /******/Object.defineProperty(exports, name, {\n          enumerable: true,\n          get: getter\n        });\n        /******/\n      }\n      /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/\n    __webpack_require__.r = function (exports) {\n      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n        /******/Object.defineProperty(exports, Symbol.toStringTag, {\n          value: 'Module'\n        });\n        /******/\n      }\n      /******/\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/\n    __webpack_require__.t = function (value, mode) {\n      /******/if (mode & 1) value = __webpack_require__(value);\n      /******/\n      if (mode & 8) return value;\n      /******/\n      if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n      /******/\n      var ns = Object.create(null);\n      /******/\n      __webpack_require__.r(ns);\n      /******/\n      Object.defineProperty(ns, 'default', {\n        enumerable: true,\n        value: value\n      });\n      /******/\n      if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n        return value[key];\n      }.bind(null, key));\n      /******/\n      return ns;\n      /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/\n    __webpack_require__.n = function (module) {\n      /******/var getter = module && module.__esModule ? /******/function getDefault() {\n        return module['default'];\n      } : /******/function getModuleExports() {\n        return module;\n      };\n      /******/\n      __webpack_require__.d(getter, 'a', getter);\n      /******/\n      return getter;\n      /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/\n    __webpack_require__.o = function (object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/\n    __webpack_require__.p = \"\";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/\n    return __webpack_require__(__webpack_require__.s = 0);\n    /******/\n  }\n  /************************************************************************/\n  /******/({\n    /***/\"./src/byte.ts\": (\n    /*!*********************!*\\\n      !*** ./src/byte.ts ***!\n      \\*********************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Some byte values, used as per STOMP specifications.\n       *\n       * Part of `@stomp/stompjs`.\n       *\n       * @internal\n       */\n      exports.BYTE = {\n        // LINEFEED byte (octet 10)\n        LF: '\\x0A',\n        // NULL byte (octet 0)\n        NULL: '\\x00'\n      };\n\n      /***/\n    }),\n    /***/\"./src/client.ts\": (\n    /*!***********************!*\\\n      !*** ./src/client.ts ***!\n      \\***********************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n        function adopt(value) {\n          return value instanceof P ? value : new P(function (resolve) {\n            resolve(value);\n          });\n        }\n        return new (P || (P = Promise))(function (resolve, reject) {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      var __generator = this && this.__generator || function (thisArg, body) {\n        var _ = {\n            label: 0,\n            sent: function () {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n          f,\n          y,\n          t,\n          g;\n        return g = {\n          next: verb(0),\n          \"throw\": verb(1),\n          \"return\": verb(2)\n        }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n          return this;\n        }), g;\n        function verb(n) {\n          return function (v) {\n            return step([n, v]);\n          };\n        }\n        function step(op) {\n          if (f) throw new TypeError(\"Generator is already executing.\");\n          while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return {\n                  value: op[1],\n                  done: false\n                };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2]) _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n          if (op[0] & 5) throw op[1];\n          return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n          };\n        }\n      };\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var stomp_handler_1 = __webpack_require__(/*! ./stomp-handler */\"./src/stomp-handler.ts\");\n      var versions_1 = __webpack_require__(/*! ./versions */\"./src/versions.ts\");\n      var web_socket_state_1 = __webpack_require__(/*! ./web-socket-state */\"./src/web-socket-state.ts\");\n      /**\n       * STOMP Client Class.\n       *\n       * Part of `@stomp/stompjs`.\n       */\n      var Client = /** @class */function () {\n        /**\n         * Create an instance.\n         */\n        function Client(conf) {\n          if (conf === void 0) {\n            conf = {};\n          }\n          /**\n           * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n           *\n           * Example:\n           * ```javascript\n           *        // Try only versions 1.0 and 1.1\n           *        client.stompVersions = new Versions(['1.0', '1.1'])\n           * ```\n           */\n          this.stompVersions = versions_1.Versions.default;\n          /**\n           *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n           */\n          this.reconnectDelay = 5000;\n          /**\n           * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n           */\n          this.heartbeatIncoming = 10000;\n          /**\n           * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n           */\n          this.heartbeatOutgoing = 10000;\n          /**\n           * This switches on a non standard behavior while sending WebSocket packets.\n           * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n           * Only Java Spring brokers seems to use this mode.\n           *\n           * WebSockets, by itself, split large (text) packets,\n           * so it is not needed with a truly compliant STOMP/WebSocket broker.\n           * Actually setting it for such broker will cause large messages to fail.\n           *\n           * `false` by default.\n           *\n           * Binary frames are never split.\n           */\n          this.splitLargeFrames = false;\n          /**\n           * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n           * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n           */\n          this.maxWebSocketChunkSize = 8 * 1024;\n          /**\n           * Usually the\n           * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n           * is automatically decided by type of the payload.\n           * Default is `false`, which should work with all compliant brokers.\n           *\n           * Set this flag to force binary frames.\n           */\n          this.forceBinaryWSFrames = false;\n          /**\n           * A bug in ReactNative chops a string on occurrence of a NULL.\n           * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n           * This makes incoming WebSocket messages invalid STOMP packets.\n           * Setting this flag attempts to reverse the damage by appending a NULL.\n           * If the broker splits a large message into multiple WebSocket messages,\n           * this flag will cause data loss and abnormal termination of connection.\n           *\n           * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n           */\n          this.appendMissingNULLonIncoming = false;\n          this._active = false;\n          // Dummy callbacks\n          var noOp = function () {};\n          this.debug = noOp;\n          this.beforeConnect = noOp;\n          this.onConnect = noOp;\n          this.onDisconnect = noOp;\n          this.onUnhandledMessage = noOp;\n          this.onUnhandledReceipt = noOp;\n          this.onUnhandledFrame = noOp;\n          this.onStompError = noOp;\n          this.onWebSocketClose = noOp;\n          this.onWebSocketError = noOp;\n          this.logRawCommunication = false;\n          // These parameters would typically get proper values before connect is called\n          this.connectHeaders = {};\n          this._disconnectHeaders = {};\n          // Apply configuration\n          this.configure(conf);\n        }\n        Object.defineProperty(Client.prototype, \"webSocket\", {\n          /**\n           * Underlying WebSocket instance, READONLY.\n           */\n          get: function () {\n            return this._webSocket;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Client.prototype, \"disconnectHeaders\", {\n          /**\n           * Disconnection headers.\n           */\n          get: function () {\n            return this._disconnectHeaders;\n          },\n          set: function (value) {\n            this._disconnectHeaders = value;\n            if (this._stompHandler) {\n              this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n            }\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Client.prototype, \"connected\", {\n          /**\n           * `true` if there is a active connection with STOMP Broker\n           */\n          get: function () {\n            return !!this._stompHandler && this._stompHandler.connected;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Client.prototype, \"connectedVersion\", {\n          /**\n           * version of STOMP protocol negotiated with the server, READONLY\n           */\n          get: function () {\n            return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Client.prototype, \"active\", {\n          /**\n           * if the client is active (connected or going to reconnect)\n           */\n          get: function () {\n            return this._active;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        /**\n         * Update configuration.\n         */\n        Client.prototype.configure = function (conf) {\n          // bulk assign all properties to this\n          Object.assign(this, conf);\n        };\n        /**\n         * Initiate the connection with the broker.\n         * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n         * it will keep trying to reconnect.\n         *\n         * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n         */\n        Client.prototype.activate = function () {\n          this._active = true;\n          this._connect();\n        };\n        Client.prototype._connect = function () {\n          return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  if (this.connected) {\n                    this.debug('STOMP: already connected, nothing to do');\n                    return [2 /*return*/];\n                  }\n                  return [4 /*yield*/, this.beforeConnect()];\n                case 1:\n                  _a.sent();\n                  if (!this._active) {\n                    this.debug('Client has been marked inactive, will not attempt to connect');\n                    return [2 /*return*/];\n                  }\n                  this.debug('Opening Web Socket...');\n                  // Get the actual WebSocket (or a similar object)\n                  this._webSocket = this._createWebSocket();\n                  this._stompHandler = new stomp_handler_1.StompHandler(this, this._webSocket, {\n                    debug: this.debug,\n                    stompVersions: this.stompVersions,\n                    connectHeaders: this.connectHeaders,\n                    disconnectHeaders: this._disconnectHeaders,\n                    heartbeatIncoming: this.heartbeatIncoming,\n                    heartbeatOutgoing: this.heartbeatOutgoing,\n                    splitLargeFrames: this.splitLargeFrames,\n                    maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                    forceBinaryWSFrames: this.forceBinaryWSFrames,\n                    logRawCommunication: this.logRawCommunication,\n                    appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                    onConnect: function (frame) {\n                      if (!_this._active) {\n                        _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                        _this._disposeStompHandler();\n                        return;\n                      }\n                      _this.onConnect(frame);\n                    },\n                    onDisconnect: function (frame) {\n                      _this.onDisconnect(frame);\n                    },\n                    onStompError: function (frame) {\n                      _this.onStompError(frame);\n                    },\n                    onWebSocketClose: function (evt) {\n                      _this.onWebSocketClose(evt);\n                      // The callback is called before attempting to reconnect, this would allow the client\n                      // to be `deactivated` in the callback.\n                      if (_this._active) {\n                        _this._schedule_reconnect();\n                      }\n                    },\n                    onWebSocketError: function (evt) {\n                      _this.onWebSocketError(evt);\n                    },\n                    onUnhandledMessage: function (message) {\n                      _this.onUnhandledMessage(message);\n                    },\n                    onUnhandledReceipt: function (frame) {\n                      _this.onUnhandledReceipt(frame);\n                    },\n                    onUnhandledFrame: function (frame) {\n                      _this.onUnhandledFrame(frame);\n                    }\n                  });\n                  this._stompHandler.start();\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n        Client.prototype._createWebSocket = function () {\n          var webSocket;\n          if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n          } else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n          }\n          webSocket.binaryType = 'arraybuffer';\n          return webSocket;\n        };\n        Client.prototype._schedule_reconnect = function () {\n          var _this = this;\n          if (this.reconnectDelay > 0) {\n            this.debug(\"STOMP: scheduling reconnection in \" + this.reconnectDelay + \"ms\");\n            this._reconnector = setTimeout(function () {\n              _this._connect();\n            }, this.reconnectDelay);\n          }\n        };\n        /**\n         * Disconnect if connected and stop auto reconnect loop.\n         * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n         *\n         * To reactivate you can call [Client#activate]{@link Client#activate}.\n         */\n        Client.prototype.deactivate = function () {\n          // indicate that auto reconnect loop should terminate\n          this._active = false;\n          // Clear if a reconnection was scheduled\n          if (this._reconnector) {\n            clearTimeout(this._reconnector);\n          }\n          this._disposeStompHandler();\n        };\n        /**\n         * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n         * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n         * After forcing disconnect, automatic reconnect will be attempted.\n         * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n         */\n        Client.prototype.forceDisconnect = function () {\n          if (this._webSocket) {\n            if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n              this._stompHandler._closeWebsocket();\n            }\n          }\n        };\n        Client.prototype._disposeStompHandler = function () {\n          // Dispose STOMP Handler\n          if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n          }\n        };\n        /**\n         * Send a message to a named destination. Refer to your STOMP broker documentation for types\n         * and naming of destinations.\n         *\n         * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n         *\n         * `body` must be String.\n         * You will need to covert the payload to string in case it is not string (e.g. JSON).\n         *\n         * To send a binary message body use binaryBody parameter. It should be a\n         * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n         * Sometimes brokers may not support binary frames out of the box.\n         * Please check your broker documentation.\n         *\n         * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n         * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n         * For binary messages `content-length` header is always added.\n         *\n         * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n         * and `content-length` header is missing.\n         *\n         * ```javascript\n         *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n         *\n         *        // Only destination is mandatory parameter\n         *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n         *\n         *        // Skip content-length header in the frame to the broker\n         *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n         *\n         *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n         *        // setting content-type header is not mandatory, however a good practice\n         *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n         *                         headers: {'content-type': 'application/octet-stream'}});\n         * ```\n         */\n        Client.prototype.publish = function (params) {\n          this._stompHandler.publish(params);\n        };\n        /**\n         * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n         * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n         * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n         * random number or a combination may be used.\n         *\n         * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n         * The operation needs to be matched based in the value of the receipt-id.\n         *\n         * This method allow watching for a receipt and invoke the callback\n         * when corresponding receipt has been received.\n         *\n         * The actual {@link FrameImpl} will be passed as parameter to the callback.\n         *\n         * Example:\n         * ```javascript\n         *        // Subscribing with acknowledgement\n         *        let receiptId = randomText();\n         *\n         *        client.watchForReceipt(receiptId, function() {\n         *          // Will be called after server acknowledges\n         *        });\n         *\n         *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n         *\n         *\n         *        // Publishing with acknowledgement\n         *        receiptId = randomText();\n         *\n         *        client.watchForReceipt(receiptId, function() {\n         *          // Will be called after server acknowledges\n         *        });\n         *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n         * ```\n         */\n        Client.prototype.watchForReceipt = function (receiptId, callback) {\n          this._stompHandler.watchForReceipt(receiptId, callback);\n        };\n        /**\n         * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n         * the {@link IMessage} as argument.\n         *\n         * Note: The library will generate an unique ID if there is none provided in the headers.\n         *       To use your own ID, pass it using the headers argument.\n         *\n         * ```javascript\n         *        callback = function(message) {\n         *        // called when the client receives a STOMP message from the server\n         *          if (message.body) {\n         *            alert(\"got message with body \" + message.body)\n         *          } else {\n         *            alert(\"got empty message\");\n         *          }\n         *        });\n         *\n         *        var subscription = client.subscribe(\"/queue/test\", callback);\n         *\n         *        // Explicit subscription id\n         *        var mySubId = 'my-subscription-id-001';\n         *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n         * ```\n         */\n        Client.prototype.subscribe = function (destination, callback, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          return this._stompHandler.subscribe(destination, callback, headers);\n        };\n        /**\n         * It is preferable to unsubscribe from a subscription by calling\n         * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n         *\n         * ```javascript\n         *        var subscription = client.subscribe(destination, onmessage);\n         *        // ...\n         *        subscription.unsubscribe();\n         * ```\n         *\n         * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n         */\n        Client.prototype.unsubscribe = function (id, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          this._stompHandler.unsubscribe(id, headers);\n        };\n        /**\n         * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n         * and [abort]{@link ITransaction#abort}.\n         *\n         * `transactionId` is optional, if not passed the library will generate it internally.\n         */\n        Client.prototype.begin = function (transactionId) {\n          return this._stompHandler.begin(transactionId);\n        };\n        /**\n         * Commit a transaction.\n         *\n         * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n         * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n         *\n         * ```javascript\n         *        var tx = client.begin(txId);\n         *        //...\n         *        tx.commit();\n         * ```\n         */\n        Client.prototype.commit = function (transactionId) {\n          this._stompHandler.commit(transactionId);\n        };\n        /**\n         * Abort a transaction.\n         * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n         * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n         *\n         * ```javascript\n         *        var tx = client.begin(txId);\n         *        //...\n         *        tx.abort();\n         * ```\n         */\n        Client.prototype.abort = function (transactionId) {\n          this._stompHandler.abort(transactionId);\n        };\n        /**\n         * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n         * on the {@link IMessage} handled by a subscription callback:\n         *\n         * ```javascript\n         *        var callback = function (message) {\n         *          // process the message\n         *          // acknowledge it\n         *          message.ack();\n         *        };\n         *        client.subscribe(destination, callback, {'ack': 'client'});\n         * ```\n         */\n        Client.prototype.ack = function (messageId, subscriptionId, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          this._stompHandler.ack(messageId, subscriptionId, headers);\n        };\n        /**\n         * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n         * on the {@link IMessage} handled by a subscription callback:\n         *\n         * ```javascript\n         *        var callback = function (message) {\n         *          // process the message\n         *          // an error occurs, nack it\n         *          message.nack();\n         *        };\n         *        client.subscribe(destination, callback, {'ack': 'client'});\n         * ```\n         */\n        Client.prototype.nack = function (messageId, subscriptionId, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          this._stompHandler.nack(messageId, subscriptionId, headers);\n        };\n        return Client;\n      }();\n      exports.Client = Client;\n\n      /***/\n    }),\n    /***/\"./src/compatibility/compat-client.ts\": (\n    /*!********************************************!*\\\n      !*** ./src/compatibility/compat-client.ts ***!\n      \\********************************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = function (d, b) {\n          extendStatics = Object.setPrototypeOf || {\n            __proto__: []\n          } instanceof Array && function (d, b) {\n            d.__proto__ = b;\n          } || function (d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n          };\n          return extendStatics(d, b);\n        };\n        return function (d, b) {\n          extendStatics(d, b);\n          function __() {\n            this.constructor = d;\n          }\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var client_1 = __webpack_require__(/*! ../client */\"./src/client.ts\");\n      var heartbeat_info_1 = __webpack_require__(/*! ./heartbeat-info */\"./src/compatibility/heartbeat-info.ts\");\n      /**\n       * Available for backward compatibility, please shift to using {@link Client}.\n       *\n       * **Deprecated**\n       *\n       * Part of `@stomp/stompjs`.\n       *\n       * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n       */\n      var CompatClient = /** @class */function (_super) {\n        __extends(CompatClient, _super);\n        /**\n         * Available for backward compatibility, please shift to using {@link Client}\n         * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n         *\n         * **Deprecated**\n         *\n         * @internal\n         */\n        function CompatClient(webSocketFactory) {\n          var _this = _super.call(this) || this;\n          /**\n           * It is no op now. No longer needed. Large packets work out of the box.\n           */\n          _this.maxWebSocketFrameSize = 16 * 1024;\n          _this._heartbeatInfo = new heartbeat_info_1.HeartbeatInfo(_this);\n          _this.reconnect_delay = 0;\n          _this.webSocketFactory = webSocketFactory;\n          // Default from previous version\n          _this.debug = function () {\n            var message = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              message[_i] = arguments[_i];\n            }\n            console.log.apply(console, message);\n          };\n          return _this;\n        }\n        CompatClient.prototype._parseConnect = function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var closeEventCallback;\n          var connectCallback;\n          var errorCallback;\n          var headers = {};\n          if (args.length < 2) {\n            throw new Error('Connect requires at least 2 arguments');\n          }\n          if (typeof args[1] === 'function') {\n            headers = args[0], connectCallback = args[1], errorCallback = args[2], closeEventCallback = args[3];\n          } else {\n            switch (args.length) {\n              case 6:\n                headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4], headers.host = args[5];\n                break;\n              default:\n                headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4];\n            }\n          }\n          return [headers, connectCallback, errorCallback, closeEventCallback];\n        };\n        /**\n         * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n         *\n         * **Deprecated**\n         *\n         * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n         * version with headers to pass your broker specific options.\n         *\n         * overloads:\n         * - connect(headers, connectCallback)\n         * - connect(headers, connectCallback, errorCallback)\n         * - connect(login, passcode, connectCallback)\n         * - connect(login, passcode, connectCallback, errorCallback)\n         * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n         * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n         *\n         * params:\n         * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n         * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n         * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n         * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n         * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n         * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n         * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n         *\n         * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n         */\n        CompatClient.prototype.connect = function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var out = this._parseConnect.apply(this, args);\n          if (out[0]) {\n            this.connectHeaders = out[0];\n          }\n          if (out[1]) {\n            this.onConnect = out[1];\n          }\n          if (out[2]) {\n            this.onStompError = out[2];\n          }\n          if (out[3]) {\n            this.onWebSocketClose = out[3];\n          }\n          _super.prototype.activate.call(this);\n        };\n        /**\n         * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n         *\n         * **Deprecated**\n         *\n         * See:\n         * [Client#onDisconnect]{@link Client#onDisconnect}, and\n         * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n         *\n         * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n         */\n        CompatClient.prototype.disconnect = function (disconnectCallback, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n          }\n          this.disconnectHeaders = headers;\n          _super.prototype.deactivate.call(this);\n        };\n        /**\n         * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n         *\n         * Send a message to a named destination. Refer to your STOMP broker documentation for types\n         * and naming of destinations. The headers will, typically, be available to the subscriber.\n         * However, there may be special purpose headers corresponding to your STOMP broker.\n         *\n         *  **Deprecated**, use [Client#publish]{@link Client#publish}\n         *\n         * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n         *\n         * ```javascript\n         *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n         *\n         *        // If you want to send a message with a body, you must also pass the headers argument.\n         *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n         * ```\n         *\n         * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n         */\n        CompatClient.prototype.send = function (destination, headers, body) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          if (body === void 0) {\n            body = '';\n          }\n          headers = Object.assign({}, headers);\n          var skipContentLengthHeader = headers['content-length'] === false;\n          if (skipContentLengthHeader) {\n            delete headers['content-length'];\n          }\n          this.publish({\n            destination: destination,\n            headers: headers,\n            body: body,\n            skipContentLengthHeader: skipContentLengthHeader\n          });\n        };\n        Object.defineProperty(CompatClient.prototype, \"reconnect_delay\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n           *\n           * **Deprecated**\n           */\n          set: function (value) {\n            this.reconnectDelay = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(CompatClient.prototype, \"ws\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n           *\n           * **Deprecated**\n           */\n          get: function () {\n            return this._webSocket;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(CompatClient.prototype, \"version\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n           *\n           * **Deprecated**\n           */\n          get: function () {\n            return this.connectedVersion;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(CompatClient.prototype, \"onreceive\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n           *\n           * **Deprecated**\n           */\n          get: function () {\n            return this.onUnhandledMessage;\n          },\n          /**\n           * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n           *\n           * **Deprecated**\n           */\n          set: function (value) {\n            this.onUnhandledMessage = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(CompatClient.prototype, \"onreceipt\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n           * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n           *\n           * **Deprecated**\n           */\n          get: function () {\n            return this.onUnhandledReceipt;\n          },\n          /**\n           * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n           *\n           * **Deprecated**\n           */\n          set: function (value) {\n            this.onUnhandledReceipt = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(CompatClient.prototype, \"heartbeat\", {\n          /**\n           * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n           * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n           *\n           * **Deprecated**\n           */\n          get: function () {\n            return this._heartbeatInfo;\n          },\n          /**\n           * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n           * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n           *\n           * **Deprecated**\n           */\n          set: function (value) {\n            this.heartbeatIncoming = value.incoming;\n            this.heartbeatOutgoing = value.outgoing;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        return CompatClient;\n      }(client_1.Client);\n      exports.CompatClient = CompatClient;\n\n      /***/\n    }),\n    /***/\"./src/compatibility/heartbeat-info.ts\": (\n    /*!*********************************************!*\\\n      !*** ./src/compatibility/heartbeat-info.ts ***!\n      \\*********************************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Part of `@stomp/stompjs`.\n       *\n       * @internal\n       */\n      var HeartbeatInfo = /** @class */function () {\n        function HeartbeatInfo(client) {\n          this.client = client;\n        }\n        Object.defineProperty(HeartbeatInfo.prototype, \"outgoing\", {\n          get: function () {\n            return this.client.heartbeatOutgoing;\n          },\n          set: function (value) {\n            this.client.heartbeatOutgoing = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(HeartbeatInfo.prototype, \"incoming\", {\n          get: function () {\n            return this.client.heartbeatIncoming;\n          },\n          set: function (value) {\n            this.client.heartbeatIncoming = value;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        return HeartbeatInfo;\n      }();\n      exports.HeartbeatInfo = HeartbeatInfo;\n\n      /***/\n    }),\n    /***/\"./src/compatibility/stomp.ts\": (\n    /*!************************************!*\\\n      !*** ./src/compatibility/stomp.ts ***!\n      \\************************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var versions_1 = __webpack_require__(/*! ../versions */\"./src/versions.ts\");\n      var compat_client_1 = __webpack_require__(/*! ./compat-client */\"./src/compatibility/compat-client.ts\");\n      /**\n       * STOMP Class, acts like a factory to create {@link Client}.\n       *\n       * Part of `@stomp/stompjs`.\n       *\n       * **Deprecated**\n       *\n       * It will be removed in next major version. Please switch to {@link Client}.\n       */\n      var Stomp = /** @class */function () {\n        function Stomp() {}\n        /**\n         * This method creates a WebSocket client that is connected to\n         * the STOMP server located at the url.\n         *\n         * ```javascript\n         *        var url = \"ws://localhost:61614/stomp\";\n         *        var client = Stomp.client(url);\n         * ```\n         *\n         * **Deprecated**\n         *\n         * It will be removed in next major version. Please switch to {@link Client}\n         * using [Client#brokerURL]{@link Client#brokerURL}.\n         */\n        Stomp.client = function (url, protocols) {\n          // This is a hack to allow another implementation than the standard\n          // HTML5 WebSocket class.\n          //\n          // It is possible to use another class by calling\n          //\n          //     Stomp.WebSocketClass = MozWebSocket\n          //\n          // *prior* to call `Stomp.client()`.\n          //\n          // This hack is deprecated and `Stomp.over()` method should be used\n          // instead.\n          // See remarks on the function Stomp.over\n          if (protocols == null) {\n            protocols = versions_1.Versions.default.protocolVersions();\n          }\n          var wsFn = function () {\n            var klass = Stomp.WebSocketClass || WebSocket;\n            return new klass(url, protocols);\n          };\n          return new compat_client_1.CompatClient(wsFn);\n        };\n        /**\n         * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n         * specify the WebSocket to use (either a standard HTML5 WebSocket or\n         * a similar object).\n         *\n         * In order to support reconnection, the function Client._connect should be callable more than once.\n         * While reconnecting\n         * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n         * alternatively allows passing a function that should return a new instance of the underlying socket.\n         *\n         * ```javascript\n         *        var client = Stomp.over(function(){\n         *          return new WebSocket('ws://localhost:15674/ws')\n         *        });\n         * ```\n         *\n         * **Deprecated**\n         *\n         * It will be removed in next major version. Please switch to {@link Client}\n         * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n         */\n        Stomp.over = function (ws) {\n          var wsFn;\n          if (typeof ws === 'function') {\n            wsFn = ws;\n          } else {\n            console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n            wsFn = function () {\n              return ws;\n            };\n          }\n          return new compat_client_1.CompatClient(wsFn);\n        };\n        /**\n         * In case you need to use a non standard class for WebSocket.\n         *\n         * For example when using within NodeJS environment:\n         *\n         * ```javascript\n         *        StompJs = require('../../esm5/');\n         *        Stomp = StompJs.Stomp;\n         *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n         * ```\n         *\n         * **Deprecated**\n         *\n         *\n         * It will be removed in next major version. Please switch to {@link Client}\n         * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n         */\n        // tslint:disable-next-line:variable-name\n        Stomp.WebSocketClass = null;\n        return Stomp;\n      }();\n      exports.Stomp = Stomp;\n\n      /***/\n    }),\n    /***/\"./src/frame-impl.ts\": (\n    /*!***************************!*\\\n      !*** ./src/frame-impl.ts ***!\n      \\***************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var byte_1 = __webpack_require__(/*! ./byte */\"./src/byte.ts\");\n      /**\n       * Frame class represents a STOMP frame.\n       *\n       * @internal\n       */\n      var FrameImpl = /** @class */function () {\n        /**\n         * Frame constructor. `command`, `headers` and `body` are available as properties.\n         *\n         * @internal\n         */\n        function FrameImpl(params) {\n          var command = params.command,\n            headers = params.headers,\n            body = params.body,\n            binaryBody = params.binaryBody,\n            escapeHeaderValues = params.escapeHeaderValues,\n            skipContentLengthHeader = params.skipContentLengthHeader;\n          this.command = command;\n          this.headers = Object.assign({}, headers || {});\n          if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n          } else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n          }\n          this.escapeHeaderValues = escapeHeaderValues || false;\n          this.skipContentLengthHeader = skipContentLengthHeader || false;\n        }\n        Object.defineProperty(FrameImpl.prototype, \"body\", {\n          /**\n           * body of the frame\n           */\n          get: function () {\n            if (!this._body && this.isBinaryBody) {\n              this._body = new TextDecoder().decode(this._binaryBody);\n            }\n            return this._body;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(FrameImpl.prototype, \"binaryBody\", {\n          /**\n           * body as Uint8Array\n           */\n          get: function () {\n            if (!this._binaryBody && !this.isBinaryBody) {\n              this._binaryBody = new TextEncoder().encode(this._body);\n            }\n            return this._binaryBody;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        /**\n         * deserialize a STOMP Frame from raw data.\n         *\n         * @internal\n         */\n        FrameImpl.fromRawFrame = function (rawFrame, escapeHeaderValues) {\n          var headers = {};\n          var trim = function (str) {\n            return str.replace(/^\\s+|\\s+$/g, '');\n          };\n          // In case of repeated headers, as per standards, first value need to be used\n          for (var _i = 0, _a = rawFrame.headers.reverse(); _i < _a.length; _i++) {\n            var header = _a[_i];\n            var idx = header.indexOf(':');\n            var key = trim(header[0]);\n            var value = trim(header[1]);\n            if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n              value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n          }\n          return new FrameImpl({\n            command: rawFrame.command,\n            headers: headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues: escapeHeaderValues\n          });\n        };\n        /**\n         * @internal\n         */\n        FrameImpl.prototype.toString = function () {\n          return this.serializeCmdAndHeaders();\n        };\n        /**\n         * serialize this Frame in a format suitable to be passed to WebSocket.\n         * If the body is string the output will be string.\n         * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n         *\n         * @internal\n         */\n        FrameImpl.prototype.serialize = function () {\n          var cmdAndHeaders = this.serializeCmdAndHeaders();\n          if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n          } else {\n            return cmdAndHeaders + this._body + byte_1.BYTE.NULL;\n          }\n        };\n        FrameImpl.prototype.serializeCmdAndHeaders = function () {\n          var lines = [this.command];\n          if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n          }\n          for (var _i = 0, _a = Object.keys(this.headers || {}); _i < _a.length; _i++) {\n            var name_1 = _a[_i];\n            var value = this.headers[name_1];\n            if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n              lines.push(name_1 + \":\" + FrameImpl.hdrValueEscape(\"\" + value));\n            } else {\n              lines.push(name_1 + \":\" + value);\n            }\n          }\n          if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n            lines.push(\"content-length:\" + this.bodyLength());\n          }\n          return lines.join(byte_1.BYTE.LF) + byte_1.BYTE.LF + byte_1.BYTE.LF;\n        };\n        FrameImpl.prototype.isBodyEmpty = function () {\n          return this.bodyLength() === 0;\n        };\n        FrameImpl.prototype.bodyLength = function () {\n          var binaryBody = this.binaryBody;\n          return binaryBody ? binaryBody.length : 0;\n        };\n        /**\n         * Compute the size of a UTF-8 string by counting its number of bytes\n         * (and not the number of characters composing the string)\n         */\n        FrameImpl.sizeOfUTF8 = function (s) {\n          return s ? new TextEncoder().encode(s).length : 0;\n        };\n        FrameImpl.toUnit8Array = function (cmdAndHeaders, binaryBody) {\n          var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n          var nullTerminator = new Uint8Array([0]);\n          var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n          uint8Frame.set(uint8CmdAndHeaders);\n          uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n          uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n          return uint8Frame;\n        };\n        /**\n         * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n         *\n         * @internal\n         */\n        FrameImpl.marshall = function (params) {\n          var frame = new FrameImpl(params);\n          return frame.serialize();\n        };\n        /**\n         *  Escape header values\n         */\n        FrameImpl.hdrValueEscape = function (str) {\n          return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n        };\n        /**\n         * UnEscape header values\n         */\n        FrameImpl.hdrValueUnEscape = function (str) {\n          return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n        };\n        return FrameImpl;\n      }();\n      exports.FrameImpl = FrameImpl;\n\n      /***/\n    }),\n    /***/\"./src/index.ts\": (\n    /*!**********************!*\\\n      !*** ./src/index.ts ***!\n      \\**********************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function __export(m) {\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n      }\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      __export(__webpack_require__(/*! ./client */\"./src/client.ts\"));\n      __export(__webpack_require__(/*! ./frame-impl */\"./src/frame-impl.ts\"));\n      __export(__webpack_require__(/*! ./parser */\"./src/parser.ts\"));\n      __export(__webpack_require__(/*! ./stomp-config */\"./src/stomp-config.ts\"));\n      __export(__webpack_require__(/*! ./stomp-headers */\"./src/stomp-headers.ts\"));\n      __export(__webpack_require__(/*! ./stomp-subscription */\"./src/stomp-subscription.ts\"));\n      __export(__webpack_require__(/*! ./versions */\"./src/versions.ts\"));\n      __export(__webpack_require__(/*! ./web-socket-state */\"./src/web-socket-state.ts\"));\n      // Compatibility code\n      __export(__webpack_require__(/*! ./compatibility/compat-client */\"./src/compatibility/compat-client.ts\"));\n      __export(__webpack_require__(/*! ./compatibility/stomp */\"./src/compatibility/stomp.ts\"));\n\n      /***/\n    }),\n    /***/\"./src/parser.ts\": (\n    /*!***********************!*\\\n      !*** ./src/parser.ts ***!\n      \\***********************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * @internal\n       */\n      var NULL = 0;\n      /**\n       * @internal\n       */\n      var LF = 10;\n      /**\n       * @internal\n       */\n      var CR = 13;\n      /**\n       * @internal\n       */\n      var COLON = 58;\n      /**\n       * This is an evented, rec descent parser.\n       * A stream of Octets can be passed and whenever it recognizes\n       * a complete Frame or an incoming ping it will invoke the registered callbacks.\n       *\n       * All incoming Octets are fed into _onByte function.\n       * Depending on current state the _onByte function keeps changing.\n       * Depending on the state it keeps accumulating into _token and _results.\n       * State is indicated by current value of _onByte, all states are named as _collect.\n       *\n       * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n       * imply that all lengths are considered in bytes (instead of string lengths).\n       * So, before actual parsing, if the incoming data is String it is converted to Octets.\n       * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n       *\n       * There is no peek function on the incoming data.\n       * When a state change occurs based on an Octet without consuming the Octet,\n       * the Octet, after state change, is fed again (_reinjectByte).\n       * This became possible as the state change can be determined by inspecting just one Octet.\n       *\n       * There are two modes to collect the body, if content-length header is there then it by counting Octets\n       * otherwise it is determined by NULL terminator.\n       *\n       * Following the standards, the command and headers are converted to Strings\n       * and the body is returned as Octets.\n       * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n       *\n       * This parser does not use Regular Expressions as that can only operate on Strings.\n       *\n       * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n       * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n       * is pushed.\n       *\n       * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n       * (which is protocol version specific), and convert body to text.\n       *\n       * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n       *\n       * Part of `@stomp/stompjs`.\n       *\n       * @internal\n       */\n      var Parser = /** @class */function () {\n        function Parser(onFrame, onIncomingPing) {\n          this.onFrame = onFrame;\n          this.onIncomingPing = onIncomingPing;\n          this._encoder = new TextEncoder();\n          this._decoder = new TextDecoder();\n          this._token = [];\n          this._initState();\n        }\n        Parser.prototype.parseChunk = function (segment, appendMissingNULLonIncoming) {\n          if (appendMissingNULLonIncoming === void 0) {\n            appendMissingNULLonIncoming = false;\n          }\n          var chunk;\n          if (segment instanceof ArrayBuffer) {\n            chunk = new Uint8Array(segment);\n          } else {\n            chunk = this._encoder.encode(segment);\n          }\n          // See https://github.com/stomp-js/stompjs/issues/89\n          // Remove when underlying issue is fixed.\n          //\n          // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n          if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            var chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n          }\n          // tslint:disable-next-line:prefer-for-of\n          for (var i = 0; i < chunk.length; i++) {\n            var byte = chunk[i];\n            this._onByte(byte);\n          }\n        };\n        // The following implements a simple Rec Descent Parser.\n        // The grammar is simple and just one byte tells what should be the next state\n        Parser.prototype._collectFrame = function (byte) {\n          if (byte === NULL) {\n            // Ignore\n            return;\n          }\n          if (byte === CR) {\n            // Ignore CR\n            return;\n          }\n          if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n          }\n          this._onByte = this._collectCommand;\n          this._reinjectByte(byte);\n        };\n        Parser.prototype._collectCommand = function (byte) {\n          if (byte === CR) {\n            // Ignore CR\n            return;\n          }\n          if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n          }\n          this._consumeByte(byte);\n        };\n        Parser.prototype._collectHeaders = function (byte) {\n          if (byte === CR) {\n            // Ignore CR\n            return;\n          }\n          if (byte === LF) {\n            this._setupCollectBody();\n            return;\n          }\n          this._onByte = this._collectHeaderKey;\n          this._reinjectByte(byte);\n        };\n        Parser.prototype._reinjectByte = function (byte) {\n          this._onByte(byte);\n        };\n        Parser.prototype._collectHeaderKey = function (byte) {\n          if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n          }\n          this._consumeByte(byte);\n        };\n        Parser.prototype._collectHeaderValue = function (byte) {\n          if (byte === CR) {\n            // Ignore CR\n            return;\n          }\n          if (byte === LF) {\n            this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n          }\n          this._consumeByte(byte);\n        };\n        Parser.prototype._setupCollectBody = function () {\n          var contentLengthHeader = this._results.headers.filter(function (header) {\n            return header[0] === 'content-length';\n          })[0];\n          if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n          } else {\n            this._onByte = this._collectBodyNullTerminated;\n          }\n        };\n        Parser.prototype._collectBodyNullTerminated = function (byte) {\n          if (byte === NULL) {\n            this._retrievedBody();\n            return;\n          }\n          this._consumeByte(byte);\n        };\n        Parser.prototype._collectBodyFixedSize = function (byte) {\n          // It is post decrement, so that we discard the trailing NULL octet\n          if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n          }\n          this._consumeByte(byte);\n        };\n        Parser.prototype._retrievedBody = function () {\n          this._results.binaryBody = this._consumeTokenAsRaw();\n          this.onFrame(this._results);\n          this._initState();\n        };\n        // Rec Descent Parser helpers\n        Parser.prototype._consumeByte = function (byte) {\n          this._token.push(byte);\n        };\n        Parser.prototype._consumeTokenAsUTF8 = function () {\n          return this._decoder.decode(this._consumeTokenAsRaw());\n        };\n        Parser.prototype._consumeTokenAsRaw = function () {\n          var rawResult = new Uint8Array(this._token);\n          this._token = [];\n          return rawResult;\n        };\n        Parser.prototype._initState = function () {\n          this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined\n          };\n          this._token = [];\n          this._headerKey = undefined;\n          this._onByte = this._collectFrame;\n        };\n        return Parser;\n      }();\n      exports.Parser = Parser;\n\n      /***/\n    }),\n    /***/\"./src/stomp-config.ts\": (\n    /*!*****************************!*\\\n      !*** ./src/stomp-config.ts ***!\n      \\*****************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Configuration options for STOMP Client, each key corresponds to\n       * field by the same name in {@link Client}. This can be passed to\n       * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n       *\n       * Part of `@stomp/stompjs`.\n       */\n      var StompConfig = /** @class */function () {\n        function StompConfig() {}\n        return StompConfig;\n      }();\n      exports.StompConfig = StompConfig;\n\n      /***/\n    }),\n    /***/\"./src/stomp-handler.ts\": (\n    /*!******************************!*\\\n      !*** ./src/stomp-handler.ts ***!\n      \\******************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var byte_1 = __webpack_require__(/*! ./byte */\"./src/byte.ts\");\n      var frame_impl_1 = __webpack_require__(/*! ./frame-impl */\"./src/frame-impl.ts\");\n      var parser_1 = __webpack_require__(/*! ./parser */\"./src/parser.ts\");\n      var versions_1 = __webpack_require__(/*! ./versions */\"./src/versions.ts\");\n      var web_socket_state_1 = __webpack_require__(/*! ./web-socket-state */\"./src/web-socket-state.ts\");\n      /**\n       * The STOMP protocol handler\n       *\n       * Part of `@stomp/stompjs`.\n       *\n       * @internal\n       */\n      var StompHandler = /** @class */function () {\n        function StompHandler(_client, _webSocket, config) {\n          var _this = this;\n          if (config === void 0) {\n            config = {};\n          }\n          this._client = _client;\n          this._webSocket = _webSocket;\n          this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: function (frame) {\n              _this.debug(\"connected to server \" + frame.headers.server);\n              _this._connected = true;\n              _this._connectedVersion = frame.headers.version;\n              // STOMP version 1.2 needs header values to be escaped\n              if (_this._connectedVersion === versions_1.Versions.V1_2) {\n                _this._escapeHeaderValues = true;\n              }\n              _this._setupHeartbeat(frame.headers);\n              _this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: function (frame) {\n              // the callback is registered when the client calls\n              // `subscribe()`.\n              // If there is no registered subscription for the received message,\n              // the default `onUnhandledMessage` callback is used that the client can set.\n              // This is useful for subscriptions that are automatically created\n              // on the browser side (e.g. [RabbitMQ's temporary\n              // queues](http://www.rabbitmq.com/stomp.html)).\n              var subscription = frame.headers.subscription;\n              var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage;\n              // bless the frame to be a Message\n              var message = frame;\n              var client = _this;\n              var messageId = _this._connectedVersion === versions_1.Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n              // add `ack()` and `nack()` methods directly to the returned frame\n              // so that a simple call to `message.ack()` can acknowledge the message.\n              message.ack = function (headers) {\n                if (headers === void 0) {\n                  headers = {};\n                }\n                return client.ack(messageId, subscription, headers);\n              };\n              message.nack = function (headers) {\n                if (headers === void 0) {\n                  headers = {};\n                }\n                return client.nack(messageId, subscription, headers);\n              };\n              onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: function (frame) {\n              var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n              if (callback) {\n                callback(frame);\n                // Server will acknowledge only once, remove the callback\n                delete _this._receiptWatchers[frame.headers['receipt-id']];\n              } else {\n                _this.onUnhandledReceipt(frame);\n              }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: function (frame) {\n              _this.onStompError(frame);\n            }\n          };\n          // used to index subscribers\n          this._counter = 0;\n          // subscription callbacks indexed by subscriber's ID\n          this._subscriptions = {};\n          // receipt-watchers indexed by receipts-ids\n          this._receiptWatchers = {};\n          this._partialData = '';\n          this._escapeHeaderValues = false;\n          this._lastServerActivityTS = Date.now();\n          this.configure(config);\n        }\n        Object.defineProperty(StompHandler.prototype, \"connectedVersion\", {\n          get: function () {\n            return this._connectedVersion;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(StompHandler.prototype, \"connected\", {\n          get: function () {\n            return this._connected;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        StompHandler.prototype.configure = function (conf) {\n          // bulk assign all properties to this\n          Object.assign(this, conf);\n        };\n        StompHandler.prototype.start = function () {\n          var _this = this;\n          var parser = new parser_1.Parser(\n          // On Frame\n          function (rawFrame) {\n            var frame = frame_impl_1.FrameImpl.fromRawFrame(rawFrame, _this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!_this.logRawCommunication) {\n              _this.debug(\"<<< \" + frame);\n            }\n            var serverFrameHandler = _this._serverFrameHandlers[frame.command] || _this.onUnhandledFrame;\n            serverFrameHandler(frame);\n          },\n          // On Incoming Ping\n          function () {\n            _this.debug('<<< PONG');\n          });\n          this._webSocket.onmessage = function (evt) {\n            _this.debug('Received data');\n            _this._lastServerActivityTS = Date.now();\n            if (_this.logRawCommunication) {\n              var rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n              _this.debug(\"<<< \" + rawChunkAsString);\n            }\n            parser.parseChunk(evt.data, _this.appendMissingNULLonIncoming);\n          };\n          this._webSocket.onclose = function (closeEvent) {\n            _this.debug(\"Connection closed to \" + _this._webSocket.url);\n            _this.onWebSocketClose(closeEvent);\n            _this._cleanUp();\n          };\n          this._webSocket.onerror = function (errorEvent) {\n            _this.onWebSocketError(errorEvent);\n          };\n          this._webSocket.onopen = function () {\n            // Clone before updating\n            var connectHeaders = Object.assign({}, _this.connectHeaders);\n            _this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = _this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [_this.heartbeatOutgoing, _this.heartbeatIncoming].join(',');\n            _this._transmit({\n              command: 'CONNECT',\n              headers: connectHeaders\n            });\n          };\n        };\n        StompHandler.prototype._setupHeartbeat = function (headers) {\n          var _this = this;\n          if (headers.version !== versions_1.Versions.V1_1 && headers.version !== versions_1.Versions.V1_2) {\n            return;\n          }\n          // It is valid for the server to not send this header\n          // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n          if (!headers['heart-beat']) {\n            return;\n          }\n          // heart-beat header received from the server looks like:\n          //\n          //     heart-beat: sx, sy\n          var _a = headers['heart-beat'].split(',').map(function (v) {\n              return parseInt(v, 10);\n            }),\n            serverOutgoing = _a[0],\n            serverIncoming = _a[1];\n          if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(\"send PING every \" + ttl + \"ms\");\n            this._pinger = setInterval(function () {\n              if (_this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                _this._webSocket.send(byte_1.BYTE.LF);\n                _this.debug('>>> PING');\n              }\n            }, ttl);\n          }\n          if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            var ttl_1 = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(\"check PONG every \" + ttl_1 + \"ms\");\n            this._ponger = setInterval(function () {\n              var delta = Date.now() - _this._lastServerActivityTS;\n              // We wait twice the TTL to be flexible on window's setInterval calls\n              if (delta > ttl_1 * 2) {\n                _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\n                _this._closeWebsocket();\n              }\n            }, ttl_1);\n          }\n        };\n        StompHandler.prototype._closeWebsocket = function () {\n          this._webSocket.onmessage = function () {}; // ignore messages\n          this._webSocket.close();\n        };\n        StompHandler.prototype._transmit = function (params) {\n          var command = params.command,\n            headers = params.headers,\n            body = params.body,\n            binaryBody = params.binaryBody,\n            skipContentLengthHeader = params.skipContentLengthHeader;\n          var frame = new frame_impl_1.FrameImpl({\n            command: command,\n            headers: headers,\n            body: body,\n            binaryBody: binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader: skipContentLengthHeader\n          });\n          var rawChunk = frame.serialize();\n          if (this.logRawCommunication) {\n            this.debug(\">>> \" + rawChunk);\n          } else {\n            this.debug(\">>> \" + frame);\n          }\n          if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n          }\n          if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n          } else {\n            var out = rawChunk;\n            while (out.length > 0) {\n              var chunk = out.substring(0, this.maxWebSocketChunkSize);\n              out = out.substring(this.maxWebSocketChunkSize);\n              this._webSocket.send(chunk);\n              this.debug(\"chunk sent = \" + chunk.length + \", remaining = \" + out.length);\n            }\n          }\n        };\n        StompHandler.prototype.dispose = function () {\n          var _this = this;\n          if (this.connected) {\n            try {\n              // clone before updating\n              var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n              if (!disconnectHeaders.receipt) {\n                disconnectHeaders.receipt = \"close-\" + this._counter++;\n              }\n              this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n                _this._closeWebsocket();\n                _this._cleanUp();\n                _this.onDisconnect(frame);\n              });\n              this._transmit({\n                command: 'DISCONNECT',\n                headers: disconnectHeaders\n              });\n            } catch (error) {\n              this.debug(\"Ignoring error during disconnect \" + error);\n            }\n          } else {\n            if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n              this._closeWebsocket();\n            }\n          }\n        };\n        StompHandler.prototype._cleanUp = function () {\n          this._connected = false;\n          if (this._pinger) {\n            clearInterval(this._pinger);\n          }\n          if (this._ponger) {\n            clearInterval(this._ponger);\n          }\n        };\n        StompHandler.prototype.publish = function (params) {\n          var destination = params.destination,\n            headers = params.headers,\n            body = params.body,\n            binaryBody = params.binaryBody,\n            skipContentLengthHeader = params.skipContentLengthHeader;\n          var hdrs = Object.assign({\n            destination: destination\n          }, headers);\n          this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body: body,\n            binaryBody: binaryBody,\n            skipContentLengthHeader: skipContentLengthHeader\n          });\n        };\n        StompHandler.prototype.watchForReceipt = function (receiptId, callback) {\n          this._receiptWatchers[receiptId] = callback;\n        };\n        StompHandler.prototype.subscribe = function (destination, callback, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          headers = Object.assign({}, headers);\n          if (!headers.id) {\n            headers.id = \"sub-\" + this._counter++;\n          }\n          headers.destination = destination;\n          this._subscriptions[headers.id] = callback;\n          this._transmit({\n            command: 'SUBSCRIBE',\n            headers: headers\n          });\n          var client = this;\n          return {\n            id: headers.id,\n            unsubscribe: function (hdrs) {\n              return client.unsubscribe(headers.id, hdrs);\n            }\n          };\n        };\n        StompHandler.prototype.unsubscribe = function (id, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          headers = Object.assign({}, headers);\n          delete this._subscriptions[id];\n          headers.id = id;\n          this._transmit({\n            command: 'UNSUBSCRIBE',\n            headers: headers\n          });\n        };\n        StompHandler.prototype.begin = function (transactionId) {\n          var txId = transactionId || \"tx-\" + this._counter++;\n          this._transmit({\n            command: 'BEGIN',\n            headers: {\n              transaction: txId\n            }\n          });\n          var client = this;\n          return {\n            id: txId,\n            commit: function () {\n              client.commit(txId);\n            },\n            abort: function () {\n              client.abort(txId);\n            }\n          };\n        };\n        StompHandler.prototype.commit = function (transactionId) {\n          this._transmit({\n            command: 'COMMIT',\n            headers: {\n              transaction: transactionId\n            }\n          });\n        };\n        StompHandler.prototype.abort = function (transactionId) {\n          this._transmit({\n            command: 'ABORT',\n            headers: {\n              transaction: transactionId\n            }\n          });\n        };\n        StompHandler.prototype.ack = function (messageId, subscriptionId, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          headers = Object.assign({}, headers);\n          if (this._connectedVersion === versions_1.Versions.V1_2) {\n            headers.id = messageId;\n          } else {\n            headers['message-id'] = messageId;\n          }\n          headers.subscription = subscriptionId;\n          this._transmit({\n            command: 'ACK',\n            headers: headers\n          });\n        };\n        StompHandler.prototype.nack = function (messageId, subscriptionId, headers) {\n          if (headers === void 0) {\n            headers = {};\n          }\n          headers = Object.assign({}, headers);\n          if (this._connectedVersion === versions_1.Versions.V1_2) {\n            headers.id = messageId;\n          } else {\n            headers['message-id'] = messageId;\n          }\n          headers.subscription = subscriptionId;\n          return this._transmit({\n            command: 'NACK',\n            headers: headers\n          });\n        };\n        return StompHandler;\n      }();\n      exports.StompHandler = StompHandler;\n\n      /***/\n    }),\n    /***/\"./src/stomp-headers.ts\": (\n    /*!******************************!*\\\n      !*** ./src/stomp-headers.ts ***!\n      \\******************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * STOMP headers. Many functions calls will accept headers as parameters.\n       * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n       *\n       * `key` and `value` must be valid strings.\n       * In addition, `key` must not contain `CR`, `LF`, or `:`.\n       *\n       * Part of `@stomp/stompjs`.\n       */\n      var StompHeaders = /** @class */function () {\n        function StompHeaders() {}\n        return StompHeaders;\n      }();\n      exports.StompHeaders = StompHeaders;\n\n      /***/\n    }),\n    /***/\"./src/stomp-subscription.ts\": (\n    /*!***********************************!*\\\n      !*** ./src/stomp-subscription.ts ***!\n      \\***********************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n       *\n       * Part of `@stomp/stompjs`.\n       */\n      var StompSubscription = /** @class */function () {\n        function StompSubscription() {}\n        return StompSubscription;\n      }();\n      exports.StompSubscription = StompSubscription;\n\n      /***/\n    }),\n    /***/\"./src/versions.ts\": (\n    /*!*************************!*\\\n      !*** ./src/versions.ts ***!\n      \\*************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Supported STOMP versions\n       *\n       * Part of `@stomp/stompjs`.\n       */\n      var Versions = /** @class */function () {\n        /**\n         * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n         *\n         * You will an instance if this class if you want to override supported versions to be declared during\n         * STOMP handshake.\n         */\n        function Versions(versions) {\n          this.versions = versions;\n        }\n        /**\n         * Used as part of CONNECT STOMP Frame\n         */\n        Versions.prototype.supportedVersions = function () {\n          return this.versions.join(',');\n        };\n        /**\n         * Used while creating a WebSocket\n         */\n        Versions.prototype.protocolVersions = function () {\n          return this.versions.map(function (x) {\n            return \"v\" + x.replace('.', '') + \".stomp\";\n          });\n        };\n        /**\n         * Indicates protocol version 1.0\n         */\n        Versions.V1_0 = '1.0';\n        /**\n         * Indicates protocol version 1.1\n         */\n        Versions.V1_1 = '1.1';\n        /**\n         * Indicates protocol version 1.2\n         */\n        Versions.V1_2 = '1.2';\n        /**\n         * @internal\n         */\n        Versions.default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n        return Versions;\n      }();\n      exports.Versions = Versions;\n\n      /***/\n    }),\n    /***/\"./src/web-socket-state.ts\": (\n    /*!*********************************!*\\\n      !*** ./src/web-socket-state.ts ***!\n      \\*********************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       * Possible states for the WebSocket, copied here to avoid dependency on WebSocket class\n       *\n       * Part of `@stomp/rx-stomp`\n       *\n       * @internal\n       */\n      var WebSocketState;\n      (function (WebSocketState) {\n        WebSocketState[WebSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n        WebSocketState[WebSocketState[\"OPEN\"] = 1] = \"OPEN\";\n        WebSocketState[WebSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n        WebSocketState[WebSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n      })(WebSocketState = exports.WebSocketState || (exports.WebSocketState = {}));\n\n      /***/\n    }),\n    /***/0: (\n    /*!****************************!*\\\n      !*** multi ./src/index.ts ***!\n      \\****************************/\n    /*! no static exports found */\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = __webpack_require__(/*! /home/kdeepak/MyWork/Tech/stomp/stompjs/src/index.ts */\"./src/index.ts\");\n\n      /***/\n    })\n\n    /******/\n  });\n});","map":{"version":3,"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","BYTE","LF","NULL","stomp_handler_1","versions_1","web_socket_state_1","Client","conf","stompVersions","Versions","default","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","_active","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","connectHeaders","_disconnectHeaders","configure","_webSocket","set","_stompHandler","disconnectHeaders","connected","connectedVersion","undefined","assign","activate","_connect","_a","sent","_createWebSocket","StompHandler","frame","_this","_disposeStompHandler","evt","_schedule_reconnect","message","start","webSocket","webSocketFactory","WebSocket","brokerURL","protocolVersions","binaryType","_reconnector","setTimeout","deactivate","clearTimeout","forceDisconnect","readyState","WebSocketState","CONNECTING","OPEN","_closeWebsocket","dispose","publish","params","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack","client_1","heartbeat_info_1","CompatClient","_super","__extends","maxWebSocketFrameSize","_heartbeatInfo","HeartbeatInfo","reconnect_delay","_i","arguments","length","console","log","apply","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","Error","login","passcode","host","connect","out","disconnect","disconnectCallback","send","body","skipContentLengthHeader","incoming","outgoing","client","compat_client_1","Stomp","url","protocols","wsFn","klass","WebSocketClass","over","ws","warn","byte_1","FrameImpl","command","binaryBody","escapeHeaderValues","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","fromRawFrame","rawFrame","trim","str","replace","reverse","header","idx","indexOf","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","keys","name_1","push","hdrValueEscape","isBodyEmpty","bodyLength","join","sizeOfUTF8","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","marshall","__export","CR","COLON","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","chunk","ArrayBuffer","chunkWithNull","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_setupCollectBody","_collectHeaderKey","_headerKey","_collectHeaderValue","contentLengthHeader","filter","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","rawResult","StompConfig","frame_impl_1","parser_1","_client","config","_serverFrameHandlers","CONNECTED","server","_connected","_connectedVersion","version","V1_2","_escapeHeaderValues","_setupHeartbeat","MESSAGE","subscription","onReceive","_subscriptions","RECEIPT","_receiptWatchers","ERROR","_counter","_partialData","_lastServerActivityTS","Date","now","parser","serverFrameHandler","onmessage","rawChunkAsString","data","onclose","closeEvent","_cleanUp","onerror","errorEvent","onopen","supportedVersions","_transmit","V1_1","split","map","v","serverOutgoing","serverIncoming","ttl","Math","max","_pinger","setInterval","ttl_1","_ponger","delta","close","rawChunk","substring","receipt","error","clearInterval","hdrs","txId","transaction","StompHeaders","StompSubscription","versions","x","V1_0"],"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/src/byte.ts","webpack://StompJs/src/client.ts","webpack://StompJs/src/compatibility/compat-client.ts","webpack://StompJs/src/compatibility/heartbeat-info.ts","webpack://StompJs/src/compatibility/stomp.ts","webpack://StompJs/src/frame-impl.ts","webpack://StompJs/src/index.ts","webpack://StompJs/src/parser.ts","webpack://StompJs/src/stomp-config.ts","webpack://StompJs/src/stomp-handler.ts","webpack://StompJs/src/stomp-headers.ts","webpack://StompJs/src/stomp-subscription.ts","webpack://StompJs/src/versions.ts","webpack://StompJs/src/web-socket-state.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {ITransaction} from './i-transaction';\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from './stomp-handler';\nimport {StompHeaders} from './stomp-headers';\nimport {StompSubscription} from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\nimport {WebSocketState} from './web-socket-state';\n\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\n   */\n  public brokerURL: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        client.stompVersions = new Versions(['1.0', '1.1'])\n   * ```\n   */\n  public stompVersions = Versions.default;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        client.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        client.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   */\n  public webSocketFactory: () => WebSocket;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  /**\n   * This switches on a non standard behavior while sending WebSocket packets.\n   * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   * Only Java Spring brokers seems to use this mode.\n   *\n   * WebSockets, by itself, split large (text) packets,\n   * so it is not needed with a truly compliant STOMP/WebSocket broker.\n   * Actually setting it for such broker will cause large messages to fail.\n   *\n   * `false` by default.\n   *\n   * Binary frames are never split.\n   */\n  public splitLargeFrames: boolean = false;\n\n  /**\n   * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n   * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n   */\n  public maxWebSocketChunkSize: number = 8 * 1024;\n\n  /**\n   * Usually the\n   * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n   * is automatically decided by type of the payload.\n   * Default is `false`, which should work with all compliant brokers.\n   *\n   * Set this flag to force binary frames.\n   */\n  public forceBinaryWSFrames: boolean = false;\n\n  /**\n   * A bug in ReactNative chops a string on occurrence of a NULL.\n   * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n   * This makes incoming WebSocket messages invalid STOMP packets.\n   * Setting this flag attempts to reverse the damage by appending a NULL.\n   * If the broker splits a large message into multiple WebSocket messages,\n   * this flag will cause data loss and abnormal termination of connection.\n   *\n   * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n   */\n  public appendMissingNULLonIncoming: boolean = false;\n\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   */\n  get disconnectHeaders(): StompHeaders {\n    return this._disconnectHeaders;\n  }\n\n  set disconnectHeaders(value: StompHeaders) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  private _disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\n   * from an endpoint.\n   *\n   * The actual {@link IMessage} will be passed as parameter to the callback.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if {@link FrameImpl} of unknown type is received from the STOMP broker.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change options on the client, which will impact the immediate connect.\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\n   *\n   * As of version 5.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   */\n  public beforeConnect: () => void|Promise<void>;\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   * Sometimes clients will like to use headers from this frame.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual Receipt {@link FrameImpl} acknowledging the DISCONNECT will be passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the Receipt {@link FrameImpl} acknowledging the DISCONNECT.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\n   * STOMP broker disconnects.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket raises an error.\n   *\n   * Actual [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketError: wsErrorCallbackType;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   */\n  public logRawCommunication: boolean;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * Currently this method does not support levels of log. Be aware that the output can be quite verbose\n   * and may contain sensitive information (like passwords, tokens etc.).\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion(): string {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    this._active = true;\n\n    this._connect();\n  }\n\n  private async _connect(): Promise<void> {\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    await this.beforeConnect();\n\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    this.debug('Opening Web Socket...');\n\n    // Get the actual WebSocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: (evt) => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    let webSocket: WebSocket;\n\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [Client#activate]{@link Client#activate}.\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === WebSocketState.CONNECTING\n              || this._webSocket.readyState === WebSocketState.OPEN) {\n        this._stompHandler._closeWebsocket();\n      }\n    }\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(params: IPublishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n   * the {@link IMessage} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n   * and [abort]{@link ITransaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  public begin(transactionId?: string): ITransaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}\n","import {Client} from '../client';\nimport {StompHeaders} from '../stomp-headers';\nimport {frameCallbackType, messageCallbackType} from '../types';\nimport {HeartbeatInfo} from './heartbeat-info';\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n\n  /**\n   * It is no op now. No longer needed. Large packets work out of the box.\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw new Error(('Connect requires at least 2 arguments'));\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public send(destination: string, headers: {[key: string]: any} = {}, body: string = ''): void {\n    headers = (Object as any).assign({}, headers);\n\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers as StompHeaders,\n      body,\n      skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n   *\n   * **Deprecated**\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n","import {CompatClient} from './compat-client';\n\n/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class HeartbeatInfo {\n  constructor(private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}\n","import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof (ws) === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n        'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n","import {BYTE} from './byte';\nimport {IFrame} from './i-frame';\nimport {StompHeaders} from './stomp-headers';\nimport {IRawFrameType} from './types';\n\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl implements IFrame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const {command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = (Object as any).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: IRawFrameType, escapeHeaderValues: boolean): FrameImpl {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, binaryBody: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n","export * from './client';\nexport * from './frame-impl';\nexport * from './i-frame';\nexport * from './i-message';\nexport * from './parser';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './i-transaction';\nexport * from './types';\nexport * from './versions';\nexport * from './web-socket-state';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n","import { IRawFrameType } from './types';\n\n/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n  private readonly _encoder = new TextEncoder();\n  private readonly _decoder = new TextDecoder();\n\n  private _results: IRawFrameType;\n\n  private _token: number[] = [];\n  private _headerKey: string;\n  private _bodyBytesRemaining: number;\n\n  private _onByte: (byte: number) => void;\n\n  public constructor(public onFrame: (rawFrame: IRawFrameType) => void, public onIncomingPing: () => void) {\n    this._initState();\n  }\n\n  public parseChunk(segment: string | ArrayBuffer, appendMissingNULLonIncoming: boolean = false) {\n    let chunk: Uint8Array;\n\n    if ((segment instanceof ArrayBuffer)) {\n      chunk = new Uint8Array(segment);\n    } else {\n      chunk = this._encoder.encode(segment);\n    }\n\n    // See https://github.com/stomp-js/stompjs/issues/89\n    // Remove when underlying issue is fixed.\n    //\n    // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n    if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n      const chunkWithNull = new Uint8Array(chunk.length + 1);\n      chunkWithNull.set(chunk, 0);\n      chunkWithNull[chunk.length] = 0;\n      chunk = chunkWithNull;\n    }\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < chunk.length; i++) {\n      const byte = chunk[i];\n      this._onByte(byte);\n    }\n  }\n\n  // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n\n  private _collectFrame(byte: number): void {\n    if (byte === NULL) { // Ignore\n      return;\n    }\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) { // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n\n    this._onByte = this._collectCommand;\n    this._reinjectByte(byte);\n  }\n\n  private _collectCommand(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaders(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._setupCollectBody();\n      return;\n    }\n    this._onByte = this._collectHeaderKey;\n    this._reinjectByte(byte);\n  }\n\n  private _reinjectByte(byte: number) {\n    this._onByte(byte);\n  }\n\n  private _collectHeaderKey(byte: number): void {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaderValue(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter((header: [string, string]) => {\n      return header[0] === 'content-length';\n    })[0];\n\n    if (contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n\n  private _collectBodyNullTerminated(byte: number): void {\n    if (byte === NULL) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectBodyFixedSize(byte: number): void {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _retrievedBody() {\n    this._results.binaryBody = this._consumeTokenAsRaw();\n\n    this.onFrame(this._results);\n\n    this._initState();\n  }\n\n  // Rec Descent Parser helpers\n\n  private _consumeByte(byte: number) {\n    this._token.push(byte);\n  }\n\n  private _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n\n  private _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n\n  private _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      binaryBody: undefined\n    };\n\n    this._token = [];\n    this._headerKey = undefined;\n\n    this._onByte = this._collectFrame;\n  }\n\n}\n","import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void|Promise<void>;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n","import {BYTE} from './byte';\nimport {Client} from './client';\nimport {FrameImpl} from './frame-impl';\nimport {IMessage} from './i-message';\nimport {ITransaction} from './i-transaction';\nimport {Parser} from './parser';\nimport {StompConfig} from './stomp-config';\nimport {StompHeaders} from './stomp-headers';\nimport {StompSubscription} from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\nimport {WebSocketState} from './web-socket-state';\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  public onWebSocketError: wsErrorCallbackType;\n\n  public logRawCommunication: boolean;\n\n  public splitLargeFrames: boolean;\n\n  public maxWebSocketChunkSize: number;\n\n  public forceBinaryWSFrames: boolean;\n\n  public appendMissingNULLonIncoming: boolean;\n\n  get connectedVersion(): string {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      (rawFrame) => {\n        const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n\n        const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      }\n    );\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      if (this.logRawCommunication) {\n        const rawChunkAsString = (evt.data instanceof ArrayBuffer) ? new TextDecoder().decode(evt.data) : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n\n    this._webSocket.onclose = (closeEvent: CloseEvent): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onerror = (errorEvent: Event): void => {\n      this.onWebSocketError(errorEvent);\n    };\n\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\n\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: 'CONNECT', headers: connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    CONNECTED: (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    MESSAGE: (frame) => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = frame as IMessage;\n\n      const client = this;\n      const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    RECEIPT: (frame) => {\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers['receipt-id']];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    ERROR: (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(',').map((v: string) => parseInt(v, 10));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === WebSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeWebsocket();\n        }\n      }, ttl);\n    }\n  }\n\n  public _closeWebsocket() {\n    this._webSocket.onmessage = () => { }; // ignore messages\n    this._webSocket.close();\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders,\n                              body?: string, binaryBody?: Uint8Array, skipContentLengthHeader?: boolean }): void {\n    const {command, headers, body, binaryBody, skipContentLengthHeader} = params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader\n    });\n\n    let rawChunk = frame.serialize();\n\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk as string;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = (Object as any).assign({}, this.disconnectHeaders);\n\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, (frame) => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: 'DISCONNECT', headers: disconnectHeaders});\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocketState.CONNECTING\n            || this._webSocket.readyState === WebSocketState.OPEN) {\n        this._closeWebsocket();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: IPublishParams): void {\n    const {destination, headers, body, binaryBody, skipContentLengthHeader} = params;\n    const hdrs: StompHeaders = (Object as any).assign({destination}, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    headers = (Object as any).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: 'SUBSCRIBE', headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: 'UNSUBSCRIBE', headers});\n  }\n\n  public begin(transactionId: string): ITransaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: 'BEGIN', headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: 'COMMIT', headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: 'ABORT', headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: 'ACK', headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: 'NACK', headers});\n  }\n\n}\n","/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompHeaders { [key: string]: string }\n","import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n","/**\n * Possible states for the WebSocket, copied here to avoid dependency on WebSocket class\n *\n * Part of `@stomp/rx-stomp`\n *\n * @internal\n */\nexport enum WebSocketState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}