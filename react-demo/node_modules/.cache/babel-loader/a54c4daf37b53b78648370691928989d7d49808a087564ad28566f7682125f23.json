{"ast":null,"code":"import { TZDate } from \"@date-fns/tz\";\n/** Return the start and end months for the calendar navigation. */\nexport function getNavMonths(props, dateLib) {\n  let {\n    startMonth,\n    endMonth\n  } = props;\n  const {\n    startOfYear,\n    startOfDay,\n    startOfMonth,\n    endOfMonth,\n    addYears,\n    endOfYear\n  } = dateLib;\n  // Handle deprecated code\n  const {\n    fromYear,\n    toYear,\n    fromMonth,\n    toMonth\n  } = props;\n  if (!startMonth && fromMonth) {\n    startMonth = fromMonth;\n  }\n  if (!startMonth && fromYear) {\n    startMonth = new Date(fromYear, 0, 1);\n  }\n  if (!endMonth && toMonth) {\n    endMonth = toMonth;\n  }\n  if (!endMonth && toYear) {\n    endMonth = new Date(toYear, 11, 31);\n  }\n  const hasDropdowns = props.captionLayout?.startsWith(\"dropdown\");\n  if (startMonth) {\n    startMonth = startOfMonth(startMonth);\n  } else if (fromYear) {\n    startMonth = new Date(fromYear, 0, 1);\n  } else if (!startMonth && hasDropdowns) {\n    const today = props.today ?? (props.timeZone ? TZDate.tz(props.timeZone) : dateLib.Date ? new dateLib.Date() : new Date());\n    startMonth = startOfYear(addYears(today, -100));\n  }\n  if (endMonth) {\n    endMonth = endOfMonth(endMonth);\n  } else if (toYear) {\n    endMonth = new Date(toYear, 11, 31);\n  } else if (!endMonth && hasDropdowns) {\n    const today = props.today ?? (props.timeZone ? TZDate.tz(props.timeZone) : dateLib.Date ? new dateLib.Date() : new Date());\n    endMonth = endOfYear(today);\n  }\n  return [startMonth ? startOfDay(startMonth) : startMonth, endMonth ? startOfDay(endMonth) : endMonth];\n}","map":{"version":3,"names":["TZDate","getNavMonths","props","dateLib","startMonth","endMonth","startOfYear","startOfDay","startOfMonth","endOfMonth","addYears","endOfYear","fromYear","toYear","fromMonth","toMonth","Date","hasDropdowns","captionLayout","startsWith","today","timeZone","tz"],"sources":["C:\\Users\\prico\\OneDrive\\Desktop\\Faculta\\SD\\Assignment_3\\react-demo\\node_modules\\react-day-picker\\src\\helpers\\getNavMonth.ts"],"sourcesContent":["import { TZDate } from \"@date-fns/tz\";\n\nimport type { DateLib } from \"../classes/DateLib.js\";\nimport type { DayPickerProps } from \"../types/index.js\";\n\n/** Return the start and end months for the calendar navigation. */\nexport function getNavMonths(\n  props: Pick<\n    DayPickerProps,\n    | \"captionLayout\"\n    | \"endMonth\"\n    | \"startMonth\"\n    | \"today\"\n    | \"timeZone\"\n    // Deprecated:\n    | \"fromMonth\"\n    | \"fromYear\"\n    | \"toMonth\"\n    | \"toYear\"\n  >,\n  dateLib: DateLib\n): [start: Date | undefined, end: Date | undefined] {\n  let { startMonth, endMonth } = props;\n\n  const {\n    startOfYear,\n    startOfDay,\n    startOfMonth,\n    endOfMonth,\n    addYears,\n    endOfYear\n  } = dateLib;\n\n  // Handle deprecated code\n  const { fromYear, toYear, fromMonth, toMonth } = props;\n  if (!startMonth && fromMonth) {\n    startMonth = fromMonth;\n  }\n  if (!startMonth && fromYear) {\n    startMonth = new Date(fromYear, 0, 1);\n  }\n  if (!endMonth && toMonth) {\n    endMonth = toMonth;\n  }\n  if (!endMonth && toYear) {\n    endMonth = new Date(toYear, 11, 31);\n  }\n\n  const hasDropdowns = props.captionLayout?.startsWith(\"dropdown\");\n  if (startMonth) {\n    startMonth = startOfMonth(startMonth);\n  } else if (fromYear) {\n    startMonth = new Date(fromYear, 0, 1);\n  } else if (!startMonth && hasDropdowns) {\n    const today =\n      props.today ??\n      (props.timeZone\n        ? TZDate.tz(props.timeZone)\n        : dateLib.Date\n          ? new dateLib.Date()\n          : new Date());\n    startMonth = startOfYear(addYears(today, -100));\n  }\n  if (endMonth) {\n    endMonth = endOfMonth(endMonth);\n  } else if (toYear) {\n    endMonth = new Date(toYear, 11, 31);\n  } else if (!endMonth && hasDropdowns) {\n    const today =\n      props.today ??\n      (props.timeZone\n        ? TZDate.tz(props.timeZone)\n        : dateLib.Date\n          ? new dateLib.Date()\n          : new Date());\n    endMonth = endOfYear(today);\n  }\n  return [\n    startMonth ? startOfDay(startMonth) : startMonth,\n    endMonth ? startOfDay(endMonth) : endMonth\n  ];\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AAKrC;AACA,OAAM,SAAUC,YAAYA,CAC1BC,KAYC,EACDC,OAAgB;EAEhB,IAAI;IAAEC,UAAU;IAAEC;EAAQ,CAAE,GAAGH,KAAK;EAEpC,MAAM;IACJI,WAAW;IACXC,UAAU;IACVC,YAAY;IACZC,UAAU;IACVC,QAAQ;IACRC;EAAS,CACV,GAAGR,OAAO;EAEX;EACA,MAAM;IAAES,QAAQ;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAO,CAAE,GAAGb,KAAK;EACtD,IAAI,CAACE,UAAU,IAAIU,SAAS,EAAE;IAC5BV,UAAU,GAAGU,SAAS;EACxB;EACA,IAAI,CAACV,UAAU,IAAIQ,QAAQ,EAAE;IAC3BR,UAAU,GAAG,IAAIY,IAAI,CAACJ,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC;EACA,IAAI,CAACP,QAAQ,IAAIU,OAAO,EAAE;IACxBV,QAAQ,GAAGU,OAAO;EACpB;EACA,IAAI,CAACV,QAAQ,IAAIQ,MAAM,EAAE;IACvBR,QAAQ,GAAG,IAAIW,IAAI,CAACH,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EACrC;EAEA,MAAMI,YAAY,GAAGf,KAAK,CAACgB,aAAa,EAAEC,UAAU,CAAC,UAAU,CAAC;EAChE,IAAIf,UAAU,EAAE;IACdA,UAAU,GAAGI,YAAY,CAACJ,UAAU,CAAC;EACvC,CAAC,MAAM,IAAIQ,QAAQ,EAAE;IACnBR,UAAU,GAAG,IAAIY,IAAI,CAACJ,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC,CAAC,MAAM,IAAI,CAACR,UAAU,IAAIa,YAAY,EAAE;IACtC,MAAMG,KAAK,GACTlB,KAAK,CAACkB,KAAK,KACVlB,KAAK,CAACmB,QAAQ,GACXrB,MAAM,CAACsB,EAAE,CAACpB,KAAK,CAACmB,QAAQ,CAAC,GACzBlB,OAAO,CAACa,IAAI,GACV,IAAIb,OAAO,CAACa,IAAI,EAAE,GAClB,IAAIA,IAAI,EAAE,CAAC;IACnBZ,UAAU,GAAGE,WAAW,CAACI,QAAQ,CAACU,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EACjD;EACA,IAAIf,QAAQ,EAAE;IACZA,QAAQ,GAAGI,UAAU,CAACJ,QAAQ,CAAC;EACjC,CAAC,MAAM,IAAIQ,MAAM,EAAE;IACjBR,QAAQ,GAAG,IAAIW,IAAI,CAACH,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EACrC,CAAC,MAAM,IAAI,CAACR,QAAQ,IAAIY,YAAY,EAAE;IACpC,MAAMG,KAAK,GACTlB,KAAK,CAACkB,KAAK,KACVlB,KAAK,CAACmB,QAAQ,GACXrB,MAAM,CAACsB,EAAE,CAACpB,KAAK,CAACmB,QAAQ,CAAC,GACzBlB,OAAO,CAACa,IAAI,GACV,IAAIb,OAAO,CAACa,IAAI,EAAE,GAClB,IAAIA,IAAI,EAAE,CAAC;IACnBX,QAAQ,GAAGM,SAAS,CAACS,KAAK,CAAC;EAC7B;EACA,OAAO,CACLhB,UAAU,GAAGG,UAAU,CAACH,UAAU,CAAC,GAAGA,UAAU,EAChDC,QAAQ,GAAGE,UAAU,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAC3C;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}